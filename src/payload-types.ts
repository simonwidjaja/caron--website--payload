/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: 'de' | 'en';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  layout: (
    | {
        /**
         * Content blocks for the first column
         */
        col1?:
          | (
              | {
                  headline?: string | null;
                  /**
                   * Choose the headline size
                   */
                  size?: ('huge' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5') | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'headlineBlock';
                }
              | {
                  text?: string | null;
                  size?: ('lg' | 'md' | 'sm' | 'xs') | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'textBlock';
                }
              | {
                  metaTitle?: string | null;
                  headline?: string | null;
                  /**
                   * Choose the headline size
                   */
                  headlineSize?: ('huge' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5') | null;
                  body?: {
                    root: {
                      type: string;
                      children: {
                        type: any;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'textCompositionBlock';
                }
              | {
                  /**
                   * Select an image to display
                   */
                  image: string | Media;
                  /**
                   * Alt text for accessibility (describe the image)
                   */
                  alt?: string | null;
                  /**
                   * Choose which image size to use
                   */
                  size?: ('thumbnail' | 'square' | 'small' | 'medium' | 'large' | 'xlarge' | 'original') | null;
                  /**
                   * Maximum width in pixels (optional)
                   */
                  maxWidth?: number | null;
                  /**
                   * Maximum height in pixels (optional)
                   */
                  maxHeight?: number | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'imageBlock';
                }
              | SpacerBlock
              | ButtonBlock
              | {
                  content: {
                    root: {
                      type: string;
                      children: {
                        type: any;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'richTextBlock';
                }
              | SVGPathAnimationBlock
            )[]
          | null;
        /**
         * Content blocks for the second column
         */
        col2?:
          | (
              | {
                  headline?: string | null;
                  /**
                   * Choose the headline size
                   */
                  size?: ('huge' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5') | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'headlineBlock';
                }
              | {
                  text?: string | null;
                  size?: ('lg' | 'md' | 'sm' | 'xs') | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'textBlock';
                }
              | {
                  metaTitle?: string | null;
                  headline?: string | null;
                  /**
                   * Choose the headline size
                   */
                  headlineSize?: ('huge' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5') | null;
                  body?: {
                    root: {
                      type: string;
                      children: {
                        type: any;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'textCompositionBlock';
                }
              | {
                  /**
                   * Select an image to display
                   */
                  image: string | Media;
                  /**
                   * Alt text for accessibility (describe the image)
                   */
                  alt?: string | null;
                  /**
                   * Choose which image size to use
                   */
                  size?: ('thumbnail' | 'square' | 'small' | 'medium' | 'large' | 'xlarge' | 'original') | null;
                  /**
                   * Maximum width in pixels (optional)
                   */
                  maxWidth?: number | null;
                  /**
                   * Maximum height in pixels (optional)
                   */
                  maxHeight?: number | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'imageBlock';
                }
              | SpacerBlock
              | ButtonBlock
              | {
                  content: {
                    root: {
                      type: string;
                      children: {
                        type: any;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'richTextBlock';
                }
              | SVGPathAnimationBlock
            )[]
          | null;
        col1Padding?: boolean | null;
        col1VerticalAlign?: ('top' | 'center' | 'bottom') | null;
        col1HorizontalAlign?: ('left' | 'center' | 'right') | null;
        col1CssClasses?: string | null;
        col2Padding?: boolean | null;
        col2VerticalAlign?: ('top' | 'center' | 'bottom') | null;
        col2HorizontalAlign?: ('left' | 'center' | 'right') | null;
        col2CssClasses?: string | null;
        /**
         * Customize the appearance of this section
         */
        classesAndStyles?: {
          /**
           * Unique identifier for the component (without #)
           */
          cssId?: string | null;
          /**
           * Space-separated CSS classes (e.g., "mb-4 text-center bg-gray-100")
           */
          cssClasses?: string | null;
          /**
           * This is scoped CSS that applies only to this instance
           */
          styles?: string | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'ColumnsTwoBlock';
      }
    | {
        content?:
          | (
              | {
                  headline?: string | null;
                  /**
                   * Choose the headline size
                   */
                  size?: ('huge' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5') | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'headlineBlock';
                }
              | {
                  text?: string | null;
                  size?: ('lg' | 'md' | 'sm' | 'xs') | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'textBlock';
                }
              | {
                  metaTitle?: string | null;
                  headline?: string | null;
                  /**
                   * Choose the headline size
                   */
                  headlineSize?: ('huge' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5') | null;
                  body?: {
                    root: {
                      type: string;
                      children: {
                        type: any;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'textCompositionBlock';
                }
              | {
                  /**
                   * Select an image to display
                   */
                  image: string | Media;
                  /**
                   * Alt text for accessibility (describe the image)
                   */
                  alt?: string | null;
                  /**
                   * Choose which image size to use
                   */
                  size?: ('thumbnail' | 'square' | 'small' | 'medium' | 'large' | 'xlarge' | 'original') | null;
                  /**
                   * Maximum width in pixels (optional)
                   */
                  maxWidth?: number | null;
                  /**
                   * Maximum height in pixels (optional)
                   */
                  maxHeight?: number | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'imageBlock';
                }
              | SpacerBlock
              | ButtonBlock
              | {
                  content: {
                    root: {
                      type: string;
                      children: {
                        type: any;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'richTextBlock';
                }
              | SVGPathAnimationBlock
            )[]
          | null;
        col1Padding?: boolean | null;
        col1VerticalAlign?: ('top' | 'center' | 'bottom') | null;
        col1HorizontalAlign?: ('left' | 'center' | 'right') | null;
        col1CssClasses?: string | null;
        /**
         * Customize the appearance of this section
         */
        classesAndStyles?: {
          /**
           * Unique identifier for the component (without #)
           */
          cssId?: string | null;
          /**
           * Space-separated CSS classes (e.g., "mb-4 text-center bg-gray-100")
           */
          cssClasses?: string | null;
          /**
           * This is scoped CSS that applies only to this instance
           */
          styles?: string | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'SectionDefaultBlock';
      }
    | {
        /**
         * Add content blocks to this full-width section
         */
        content?:
          | (
              | {
                  headline?: string | null;
                  /**
                   * Choose the headline size
                   */
                  size?: ('huge' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5') | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'headlineBlock';
                }
              | {
                  text?: string | null;
                  size?: ('lg' | 'md' | 'sm' | 'xs') | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'textBlock';
                }
              | {
                  metaTitle?: string | null;
                  headline?: string | null;
                  /**
                   * Choose the headline size
                   */
                  headlineSize?: ('huge' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5') | null;
                  body?: {
                    root: {
                      type: string;
                      children: {
                        type: any;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'textCompositionBlock';
                }
              | {
                  /**
                   * Select an image to display
                   */
                  image: string | Media;
                  /**
                   * Alt text for accessibility (describe the image)
                   */
                  alt?: string | null;
                  /**
                   * Choose which image size to use
                   */
                  size?: ('thumbnail' | 'square' | 'small' | 'medium' | 'large' | 'xlarge' | 'original') | null;
                  /**
                   * Maximum width in pixels (optional)
                   */
                  maxWidth?: number | null;
                  /**
                   * Maximum height in pixels (optional)
                   */
                  maxHeight?: number | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'imageBlock';
                }
              | SpacerBlock
              | ButtonBlock
              | {
                  content: {
                    root: {
                      type: string;
                      children: {
                        type: any;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'richTextBlock';
                }
              | SVGPathAnimationBlock
            )[]
          | null;
        /**
         * Enable or disable default padding for this section
         */
        padding?: boolean | null;
        /**
         * Customize the appearance of this section
         */
        classesAndStyles?: {
          /**
           * Unique identifier for the component (without #)
           */
          cssId?: string | null;
          /**
           * Space-separated CSS classes (e.g., "mb-4 text-center bg-gray-100")
           */
          cssClasses?: string | null;
          /**
           * This is scoped CSS that applies only to this instance
           */
          styles?: string | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'FullWidthBlock';
      }
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SpacerBlock".
 */
export interface SpacerBlock {
  size:
    | '1px'
    | '2px'
    | '3px'
    | '5px'
    | '10px'
    | '20px'
    | '30px'
    | '40px'
    | '50px'
    | '80px'
    | '100px'
    | '150px'
    | '200px'
    | '300px';
  id?: string | null;
  blockName?: string | null;
  blockType: 'spacerBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ButtonBlock".
 */
export interface ButtonBlock {
  label: string;
  variant: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
  size: 'default' | 'sm' | 'lg' | 'icon';
  link: Link;
  id?: string | null;
  blockName?: string | null;
  blockType: 'buttonBlock';
}
/**
 * Link to an internal page or external URL
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Link".
 */
export interface Link {
  type: 'internal' | 'external';
  internalLink?: (string | null) | Page;
  externalLink?: string | null;
  newTab?: boolean | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SVGPathAnimationBlock".
 */
export interface SVGPathAnimationBlock {
  /**
   * Optional CSS classes to apply to the SVG container
   */
  className?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'svgPathAnimation';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  heroImage?: (string | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: string | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        categoryID?: string | null;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  layout?:
    | T
    | {
        ColumnsTwoBlock?:
          | T
          | {
              col1?:
                | T
                | {
                    headlineBlock?:
                      | T
                      | {
                          headline?: T;
                          size?: T;
                          id?: T;
                          blockName?: T;
                        };
                    textBlock?:
                      | T
                      | {
                          text?: T;
                          size?: T;
                          id?: T;
                          blockName?: T;
                        };
                    textCompositionBlock?:
                      | T
                      | {
                          metaTitle?: T;
                          headline?: T;
                          headlineSize?: T;
                          body?: T;
                          id?: T;
                          blockName?: T;
                        };
                    imageBlock?:
                      | T
                      | {
                          image?: T;
                          alt?: T;
                          size?: T;
                          maxWidth?: T;
                          maxHeight?: T;
                          id?: T;
                          blockName?: T;
                        };
                    spacerBlock?: T | SpacerBlockSelect<T>;
                    buttonBlock?: T | ButtonBlockSelect<T>;
                    richTextBlock?:
                      | T
                      | {
                          content?: T;
                          id?: T;
                          blockName?: T;
                        };
                    svgPathAnimation?: T | SVGPathAnimationBlockSelect<T>;
                  };
              col2?:
                | T
                | {
                    headlineBlock?:
                      | T
                      | {
                          headline?: T;
                          size?: T;
                          id?: T;
                          blockName?: T;
                        };
                    textBlock?:
                      | T
                      | {
                          text?: T;
                          size?: T;
                          id?: T;
                          blockName?: T;
                        };
                    textCompositionBlock?:
                      | T
                      | {
                          metaTitle?: T;
                          headline?: T;
                          headlineSize?: T;
                          body?: T;
                          id?: T;
                          blockName?: T;
                        };
                    imageBlock?:
                      | T
                      | {
                          image?: T;
                          alt?: T;
                          size?: T;
                          maxWidth?: T;
                          maxHeight?: T;
                          id?: T;
                          blockName?: T;
                        };
                    spacerBlock?: T | SpacerBlockSelect<T>;
                    buttonBlock?: T | ButtonBlockSelect<T>;
                    richTextBlock?:
                      | T
                      | {
                          content?: T;
                          id?: T;
                          blockName?: T;
                        };
                    svgPathAnimation?: T | SVGPathAnimationBlockSelect<T>;
                  };
              col1Padding?: T;
              col1VerticalAlign?: T;
              col1HorizontalAlign?: T;
              col1CssClasses?: T;
              col2Padding?: T;
              col2VerticalAlign?: T;
              col2HorizontalAlign?: T;
              col2CssClasses?: T;
              classesAndStyles?:
                | T
                | {
                    cssId?: T;
                    cssClasses?: T;
                    styles?: T;
                  };
              id?: T;
              blockName?: T;
            };
        SectionDefaultBlock?:
          | T
          | {
              content?:
                | T
                | {
                    headlineBlock?:
                      | T
                      | {
                          headline?: T;
                          size?: T;
                          id?: T;
                          blockName?: T;
                        };
                    textBlock?:
                      | T
                      | {
                          text?: T;
                          size?: T;
                          id?: T;
                          blockName?: T;
                        };
                    textCompositionBlock?:
                      | T
                      | {
                          metaTitle?: T;
                          headline?: T;
                          headlineSize?: T;
                          body?: T;
                          id?: T;
                          blockName?: T;
                        };
                    imageBlock?:
                      | T
                      | {
                          image?: T;
                          alt?: T;
                          size?: T;
                          maxWidth?: T;
                          maxHeight?: T;
                          id?: T;
                          blockName?: T;
                        };
                    spacerBlock?: T | SpacerBlockSelect<T>;
                    buttonBlock?: T | ButtonBlockSelect<T>;
                    richTextBlock?:
                      | T
                      | {
                          content?: T;
                          id?: T;
                          blockName?: T;
                        };
                    svgPathAnimation?: T | SVGPathAnimationBlockSelect<T>;
                  };
              col1Padding?: T;
              col1VerticalAlign?: T;
              col1HorizontalAlign?: T;
              col1CssClasses?: T;
              classesAndStyles?:
                | T
                | {
                    cssId?: T;
                    cssClasses?: T;
                    styles?: T;
                  };
              id?: T;
              blockName?: T;
            };
        FullWidthBlock?:
          | T
          | {
              content?:
                | T
                | {
                    headlineBlock?:
                      | T
                      | {
                          headline?: T;
                          size?: T;
                          id?: T;
                          blockName?: T;
                        };
                    textBlock?:
                      | T
                      | {
                          text?: T;
                          size?: T;
                          id?: T;
                          blockName?: T;
                        };
                    textCompositionBlock?:
                      | T
                      | {
                          metaTitle?: T;
                          headline?: T;
                          headlineSize?: T;
                          body?: T;
                          id?: T;
                          blockName?: T;
                        };
                    imageBlock?:
                      | T
                      | {
                          image?: T;
                          alt?: T;
                          size?: T;
                          maxWidth?: T;
                          maxHeight?: T;
                          id?: T;
                          blockName?: T;
                        };
                    spacerBlock?: T | SpacerBlockSelect<T>;
                    buttonBlock?: T | ButtonBlockSelect<T>;
                    richTextBlock?:
                      | T
                      | {
                          content?: T;
                          id?: T;
                          blockName?: T;
                        };
                    svgPathAnimation?: T | SVGPathAnimationBlockSelect<T>;
                  };
              padding?: T;
              classesAndStyles?:
                | T
                | {
                    cssId?: T;
                    cssClasses?: T;
                    styles?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SpacerBlock_select".
 */
export interface SpacerBlockSelect<T extends boolean = true> {
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ButtonBlock_select".
 */
export interface ButtonBlockSelect<T extends boolean = true> {
  label?: T;
  variant?: T;
  size?: T;
  link?: T | LinkSelect<T>;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Link_select".
 */
export interface LinkSelect<T extends boolean = true> {
  type?: T;
  internalLink?: T;
  externalLink?: T;
  newTab?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SVGPathAnimationBlock_select".
 */
export interface SVGPathAnimationBlockSelect<T extends boolean = true> {
  className?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        categoryID?: T;
        title?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  navItems?:
    | {
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    global?: string | null;
    user?: (string | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}